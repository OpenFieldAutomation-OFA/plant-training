2024/06/18 08:38:26 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 0
    GPU 0: NVIDIA RTX A6000
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 12.3, V12.3.107
    GCC: x86_64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 2.3.1+cu121
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.3.6 (Git Hash 86e6af5974177e513fd3fee58425e1063e7f1361)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.9.2
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=8.9.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.3.1, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.18.1+cu121
    OpenCV: 4.10.0
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 0
    deterministic: True
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 1
------------------------------------------------------------

2024/06/18 08:38:27 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=1024)
data_dir = '/mnt/data/caw/classification'
data_preprocessor = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    num_classes=7806,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
default_hooks = dict(
    checkpoint=dict(interval=1, max_keep_ckpts=3, type='CheckpointHook'),
    logger=dict(interval=100, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(enable=False, type='VisualizationHook'))
default_scope = 'mmpretrain'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'pytorch'
load_from = None
log_level = 'INFO'
model = dict(
    init_cfg=None,
    model_name='vit_base_patch14_reg4_dinov2.lvd142m',
    num_classes=7806,
    type='TimmClassifier')
optim_wrapper = dict(
    loss_scale='dynamic',
    optimizer=dict(lr=0.001, type='AdamW', weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            cls_token=dict(decay_mult=0.0), mask_token=dict(decay_mult=0.0))),
    type='AmpOptimWrapper')
param_scheduler = dict(by_epoch=True, type='CosineAnnealingLR')
randomness = dict(deterministic=True, seed=0)
resume = True
test_cfg = dict()
test_dataloader = dict(
    batch_size=128,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='annotation/caw_test.txt',
        data_prefix='/mnt/data/caw/classification',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                backend='pillow',
                edge='short',
                interpolation='bicubic',
                scale=518,
                type='ResizeEdge'),
            dict(crop_size=518, type='CenterCrop'),
            dict(type='PackInputs'),
        ],
        type='CustomDataset'),
    num_workers=10,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
test_evaluator = dict(
    topk=(
        1,
        5,
    ), type='Accuracy')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        backend='pillow',
        edge='short',
        interpolation='bicubic',
        scale=518,
        type='ResizeEdge'),
    dict(crop_size=518, type='CenterCrop'),
    dict(type='PackInputs'),
]
train_cfg = dict(by_epoch=True, max_epochs=15, val_interval=1)
train_dataloader = dict(
    batch_size=64,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='annotation/caw_train.txt',
        data_prefix='/mnt/data/caw/classification',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                backend='pillow',
                edge='short',
                interpolation='bicubic',
                scale=518,
                type='ResizeEdge'),
            dict(crop_size=518, type='CenterCrop'),
            dict(type='PackInputs'),
        ],
        type='CustomDataset'),
    num_workers=10,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        backend='pillow',
        interpolation='bicubic',
        scale=518,
        type='RandomResizedCrop'),
    dict(direction='horizontal', prob=0.5, type='RandomFlip'),
    dict(brightness=0.4, contrast=0.4, saturation=0.4, type='ColorJitter'),
    dict(type='PackInputs'),
]
val_cfg = dict()
val_dataloader = dict(
    batch_size=128,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='annotation/caw_val.txt',
        data_prefix='/mnt/data/caw/classification',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                backend='pillow',
                edge='short',
                interpolation='bicubic',
                scale=518,
                type='ResizeEdge'),
            dict(crop_size=518, type='CenterCrop'),
            dict(type='PackInputs'),
        ],
        type='CustomDataset'),
    num_workers=10,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
val_evaluator = dict(
    topk=(
        1,
        5,
    ), type='Accuracy')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='UniversalVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/scratch-allclasses'

2024/06/18 08:38:29 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/06/18 08:38:29 - mmengine - INFO - paramwise_options -- model.cls_token:lr=0.001
2024/06/18 08:38:29 - mmengine - INFO - paramwise_options -- model.cls_token:weight_decay=0.0
2024/06/18 08:38:29 - mmengine - INFO - paramwise_options -- model.cls_token:decay_mult=0.0
Name of parameter - Initialization information

model.cls_token - torch.Size([1, 1, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.reg_token - torch.Size([1, 4, 768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.pos_embed - torch.Size([1, 1369, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.patch_embed.proj.weight - torch.Size([768, 3, 14, 14]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.patch_embed.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.0.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.0.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.0.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.0.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.1.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.1.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.1.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.1.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.2.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.2.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.2.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.2.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.3.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.3.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.3.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.3.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.4.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.4.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.4.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.4.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.5.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.5.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.5.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.5.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.6.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.6.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.6.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.6.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.7.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.7.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.7.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.7.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.8.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.8.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.8.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.8.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.9.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.9.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.9.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.9.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.10.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.10.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.10.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.10.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.11.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.11.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.11.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.11.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.head.weight - torch.Size([7806, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.head.bias - torch.Size([7806]): 
The value is the same before and after calling `init_weights` of TimmClassifier  
2024/06/18 08:38:30 - mmengine - INFO - Auto resumed from the latest checkpoint /root/weed-detection/work_dirs/scratch-allclasses/epoch_13.pth.
2024/06/18 08:38:30 - mmengine - INFO - Load checkpoint from /root/weed-detection/work_dirs/scratch-allclasses/epoch_13.pth
2024/06/18 08:38:30 - mmengine - INFO - resumed epoch: 13, iter: 13676
2024/06/18 08:38:30 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/06/18 08:38:30 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/06/18 08:38:30 - mmengine - INFO - Checkpoints will be saved to /root/weed-detection/work_dirs/scratch-allclasses.
2024/06/18 08:40:20 - mmengine - INFO - Epoch(train) [14][ 100/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:36:34  time: 1.0850  data_time: 0.0013  memory: 33870  loss: 1.8261
2024/06/18 08:42:08 - mmengine - INFO - Epoch(train) [14][ 200/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:34:36  time: 1.0866  data_time: 0.0009  memory: 33870  loss: 1.8599
2024/06/18 08:43:57 - mmengine - INFO - Epoch(train) [14][ 300/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:32:46  time: 1.0874  data_time: 0.0010  memory: 33870  loss: 1.8505
2024/06/18 08:44:23 - mmengine - INFO - Exp name: scratch-allclasses_20240618_083826
2024/06/18 08:45:46 - mmengine - INFO - Epoch(train) [14][ 400/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:30:56  time: 1.0885  data_time: 0.0010  memory: 33870  loss: 1.8069
2024/06/18 08:47:35 - mmengine - INFO - Epoch(train) [14][ 500/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:29:07  time: 1.0883  data_time: 0.0010  memory: 33870  loss: 1.8462
2024/06/18 08:49:24 - mmengine - INFO - Epoch(train) [14][ 600/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:27:17  time: 1.0883  data_time: 0.0009  memory: 33870  loss: 1.7190
2024/06/18 08:51:13 - mmengine - INFO - Epoch(train) [14][ 700/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:25:28  time: 1.0888  data_time: 0.0010  memory: 33870  loss: 1.6828
2024/06/18 08:53:01 - mmengine - INFO - Epoch(train) [14][ 800/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:23:39  time: 1.0878  data_time: 0.0009  memory: 33870  loss: 1.8394
2024/06/18 08:54:50 - mmengine - INFO - Epoch(train) [14][ 900/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:21:50  time: 1.0885  data_time: 0.0010  memory: 33870  loss: 1.8206
2024/06/18 08:56:39 - mmengine - INFO - Epoch(train) [14][1000/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:20:01  time: 1.0878  data_time: 0.0010  memory: 33870  loss: 1.6784
2024/06/18 08:57:36 - mmengine - INFO - Exp name: scratch-allclasses_20240618_083826
2024/06/18 08:57:36 - mmengine - INFO - Saving checkpoint at 14 epochs
2024/06/18 08:59:10 - mmengine - INFO - Epoch(val) [14][30/30]    accuracy/top1: 49.6524  accuracy/top5: 80.2139  data_time: 0.1502  time: 2.9572
2024/06/18 09:00:59 - mmengine - INFO - Epoch(train) [15][ 100/1052]  base_lr: 1.0926e-05 lr: 1.0926e-05  eta: 0:17:16  time: 1.0904  data_time: 0.0011  memory: 33870  loss: 1.6841
2024/06/18 09:02:48 - mmengine - INFO - Epoch(train) [15][ 200/1052]  base_lr: 1.0926e-05 lr: 1.0926e-05  eta: 0:15:27  time: 1.0890  data_time: 0.0009  memory: 33870  loss: 1.7979
2024/06/18 09:04:06 - mmengine - INFO - Exp name: scratch-allclasses_20240618_083826
2024/06/18 09:04:37 - mmengine - INFO - Epoch(train) [15][ 300/1052]  base_lr: 1.0926e-05 lr: 1.0926e-05  eta: 0:13:39  time: 1.0883  data_time: 0.0009  memory: 33870  loss: 1.8194
2024/06/18 09:06:26 - mmengine - INFO - Epoch(train) [15][ 400/1052]  base_lr: 1.0926e-05 lr: 1.0926e-05  eta: 0:11:50  time: 1.0884  data_time: 0.0009  memory: 33870  loss: 1.7254
2024/06/18 09:08:15 - mmengine - INFO - Epoch(train) [15][ 500/1052]  base_lr: 1.0926e-05 lr: 1.0926e-05  eta: 0:10:01  time: 1.0892  data_time: 0.0012  memory: 33870  loss: 1.7094
2024/06/18 09:10:04 - mmengine - INFO - Epoch(train) [15][ 600/1052]  base_lr: 1.0926e-05 lr: 1.0926e-05  eta: 0:08:12  time: 1.0888  data_time: 0.0009  memory: 33870  loss: 1.7041
2024/06/18 09:11:53 - mmengine - INFO - Epoch(train) [15][ 700/1052]  base_lr: 1.0926e-05 lr: 1.0926e-05  eta: 0:06:23  time: 1.0892  data_time: 0.0009  memory: 33870  loss: 1.7306
2024/06/18 09:13:42 - mmengine - INFO - Epoch(train) [15][ 800/1052]  base_lr: 1.0926e-05 lr: 1.0926e-05  eta: 0:04:34  time: 1.0894  data_time: 0.0010  memory: 33870  loss: 1.8564
2024/06/18 09:15:31 - mmengine - INFO - Epoch(train) [15][ 900/1052]  base_lr: 1.0926e-05 lr: 1.0926e-05  eta: 0:02:45  time: 1.0899  data_time: 0.0009  memory: 33870  loss: 1.7191
2024/06/18 09:17:20 - mmengine - INFO - Epoch(train) [15][1000/1052]  base_lr: 1.0926e-05 lr: 1.0926e-05  eta: 0:00:56  time: 1.0894  data_time: 0.0009  memory: 33870  loss: 1.7997
2024/06/18 09:18:16 - mmengine - INFO - Exp name: scratch-allclasses_20240618_083826
2024/06/18 09:18:16 - mmengine - INFO - Saving checkpoint at 15 epochs
2024/06/18 09:19:46 - mmengine - INFO - Epoch(val) [15][30/30]    accuracy/top1: 50.0802  accuracy/top5: 80.0802  data_time: 0.0376  time: 2.8255

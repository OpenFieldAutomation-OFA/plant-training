2024/06/17 17:09:27 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 0
    GPU 0: NVIDIA RTX A6000
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 12.3, V12.3.107
    GCC: x86_64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 2.3.1+cu121
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.3.6 (Git Hash 86e6af5974177e513fd3fee58425e1063e7f1361)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.9.2
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=8.9.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.3.1, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.18.1+cu121
    OpenCV: 4.10.0
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 0
    deterministic: True
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 1
------------------------------------------------------------

2024/06/17 17:09:28 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=1024)
data_dir = '/mnt/data/caw/classification'
data_preprocessor = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    num_classes=7806,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
default_hooks = dict(
    checkpoint=dict(interval=1, type='CheckpointHook'),
    logger=dict(interval=100, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(enable=False, type='VisualizationHook'))
default_scope = 'mmpretrain'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'pytorch'
load_from = None
log_level = 'INFO'
model = dict(
    init_cfg=None,
    model_name='vit_base_patch14_reg4_dinov2.lvd142m',
    num_classes=7806,
    type='TimmClassifier')
optim_wrapper = dict(
    loss_scale='dynamic',
    optimizer=dict(lr=0.001, type='AdamW', weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            cls_token=dict(decay_mult=0.0), mask_token=dict(decay_mult=0.0))),
    type='AmpOptimWrapper')
param_scheduler = dict(by_epoch=True, type='CosineAnnealingLR')
randomness = dict(deterministic=True, seed=0)
resume = False
test_cfg = dict()
test_dataloader = dict(
    batch_size=128,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='annotation/caw_test.txt',
        data_prefix='/mnt/data/caw/classification',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                backend='pillow',
                edge='short',
                interpolation='bicubic',
                scale=518,
                type='ResizeEdge'),
            dict(crop_size=518, type='CenterCrop'),
            dict(type='PackInputs'),
        ],
        type='CustomDataset'),
    num_workers=10,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
test_evaluator = dict(
    topk=(
        1,
        5,
    ), type='Accuracy')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        backend='pillow',
        edge='short',
        interpolation='bicubic',
        scale=518,
        type='ResizeEdge'),
    dict(crop_size=518, type='CenterCrop'),
    dict(type='PackInputs'),
]
train_cfg = dict(by_epoch=True, max_epochs=15, val_interval=1)
train_dataloader = dict(
    batch_size=64,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='annotation/caw_train.txt',
        data_prefix='/mnt/data/caw/classification',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                backend='pillow',
                edge='short',
                interpolation='bicubic',
                scale=518,
                type='ResizeEdge'),
            dict(crop_size=518, type='CenterCrop'),
            dict(type='PackInputs'),
        ],
        type='CustomDataset'),
    num_workers=10,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        backend='pillow',
        interpolation='bicubic',
        scale=518,
        type='RandomResizedCrop'),
    dict(direction='horizontal', prob=0.5, type='RandomFlip'),
    dict(brightness=0.4, contrast=0.4, saturation=0.4, type='ColorJitter'),
    dict(type='PackInputs'),
]
val_cfg = dict()
val_dataloader = dict(
    batch_size=128,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='annotation/caw_val.txt',
        data_prefix='/mnt/data/caw/classification',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                backend='pillow',
                edge='short',
                interpolation='bicubic',
                scale=518,
                type='ResizeEdge'),
            dict(crop_size=518, type='CenterCrop'),
            dict(type='PackInputs'),
        ],
        type='CustomDataset'),
    num_workers=10,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
val_evaluator = dict(
    topk=(
        1,
        5,
    ), type='Accuracy')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='UniversalVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/scratch-allclasses'

2024/06/17 17:09:35 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/06/17 17:09:36 - mmengine - INFO - paramwise_options -- model.cls_token:lr=0.001
2024/06/17 17:09:36 - mmengine - INFO - paramwise_options -- model.cls_token:weight_decay=0.0
2024/06/17 17:09:36 - mmengine - INFO - paramwise_options -- model.cls_token:decay_mult=0.0
Name of parameter - Initialization information

model.cls_token - torch.Size([1, 1, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.reg_token - torch.Size([1, 4, 768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.pos_embed - torch.Size([1, 1369, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.patch_embed.proj.weight - torch.Size([768, 3, 14, 14]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.patch_embed.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.0.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.0.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.0.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.0.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.0.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.1.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.1.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.1.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.1.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.1.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.2.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.2.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.2.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.2.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.2.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.3.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.3.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.3.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.3.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.3.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.4.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.4.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.4.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.4.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.4.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.5.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.5.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.5.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.5.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.5.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.6.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.6.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.6.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.6.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.6.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.7.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.7.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.7.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.7.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.7.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.8.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.8.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.8.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.8.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.8.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.9.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.9.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.9.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.9.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.9.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.10.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.10.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.10.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.10.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.10.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.norm1.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.norm1.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.attn.qkv.weight - torch.Size([2304, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.11.attn.qkv.bias - torch.Size([2304]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.attn.proj.weight - torch.Size([768, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.11.attn.proj.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.ls1.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.norm2.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.norm2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.mlp.fc1.weight - torch.Size([3072, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.11.mlp.fc1.bias - torch.Size([3072]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.mlp.fc2.weight - torch.Size([768, 3072]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.blocks.11.mlp.fc2.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.blocks.11.ls2.gamma - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of TimmClassifier  

model.head.weight - torch.Size([7806, 768]): 
Initialized by user-defined `init_weights` in VisionTransformer  

model.head.bias - torch.Size([7806]): 
The value is the same before and after calling `init_weights` of TimmClassifier  
2024/06/17 17:09:36 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2024/06/17 17:09:36 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2024/06/17 17:09:36 - mmengine - INFO - Checkpoints will be saved to /root/weed-detection/work_dirs/scratch-allclasses.
2024/06/17 17:11:26 - mmengine - INFO - Epoch(train)  [1][ 100/1052]  base_lr: 1.0000e-03 lr: 1.0000e-03  eta: 4:45:25  time: 1.0866  data_time: 0.0010  memory: 33872  loss: 3.1278
2024/06/17 17:13:15 - mmengine - INFO - Epoch(train)  [1][ 200/1052]  base_lr: 1.0000e-03 lr: 1.0000e-03  eta: 4:43:10  time: 1.0899  data_time: 0.0010  memory: 33872  loss: 2.8384
2024/06/17 17:15:04 - mmengine - INFO - Epoch(train)  [1][ 300/1052]  base_lr: 1.0000e-03 lr: 1.0000e-03  eta: 4:41:22  time: 1.0902  data_time: 0.0010  memory: 33872  loss: 2.5297
2024/06/17 17:16:53 - mmengine - INFO - Epoch(train)  [1][ 400/1052]  base_lr: 1.0000e-03 lr: 1.0000e-03  eta: 4:39:31  time: 1.0892  data_time: 0.0010  memory: 33872  loss: 2.6838
2024/06/17 17:18:41 - mmengine - INFO - Epoch(train)  [1][ 500/1052]  base_lr: 1.0000e-03 lr: 1.0000e-03  eta: 4:37:36  time: 1.0868  data_time: 0.0010  memory: 33872  loss: 2.6146
2024/06/17 17:20:30 - mmengine - INFO - Epoch(train)  [1][ 600/1052]  base_lr: 1.0000e-03 lr: 1.0000e-03  eta: 4:35:43  time: 1.0881  data_time: 0.0010  memory: 33872  loss: 2.4642
2024/06/17 17:22:19 - mmengine - INFO - Epoch(train)  [1][ 700/1052]  base_lr: 1.0000e-03 lr: 1.0000e-03  eta: 4:33:46  time: 1.0857  data_time: 0.0010  memory: 33872  loss: 2.6686
2024/06/17 17:24:07 - mmengine - INFO - Epoch(train)  [1][ 800/1052]  base_lr: 1.0000e-03 lr: 1.0000e-03  eta: 4:31:50  time: 1.0856  data_time: 0.0010  memory: 33872  loss: 2.4624
2024/06/17 17:25:56 - mmengine - INFO - Epoch(train)  [1][ 900/1052]  base_lr: 1.0000e-03 lr: 1.0000e-03  eta: 4:29:56  time: 1.0855  data_time: 0.0010  memory: 33872  loss: 2.6760
2024/06/17 17:27:45 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 17:27:45 - mmengine - INFO - Epoch(train)  [1][1000/1052]  base_lr: 1.0000e-03 lr: 1.0000e-03  eta: 4:28:02  time: 1.0850  data_time: 0.0012  memory: 33872  loss: 2.7323
2024/06/17 17:28:41 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 17:28:41 - mmengine - INFO - Saving checkpoint at 1 epochs
2024/06/17 17:30:14 - mmengine - INFO - Epoch(val) [1][30/30]    accuracy/top1: 33.3690  accuracy/top5: 64.9198  data_time: 0.0560  time: 2.9342
2024/06/17 17:32:03 - mmengine - INFO - Epoch(train)  [2][ 100/1052]  base_lr: 9.8907e-04 lr: 9.8907e-04  eta: 4:25:15  time: 1.0833  data_time: 0.0009  memory: 33872  loss: 2.4037
2024/06/17 17:33:51 - mmengine - INFO - Epoch(train)  [2][ 200/1052]  base_lr: 9.8907e-04 lr: 9.8907e-04  eta: 4:23:20  time: 1.0824  data_time: 0.0009  memory: 33872  loss: 2.5988
2024/06/17 17:35:40 - mmengine - INFO - Epoch(train)  [2][ 300/1052]  base_lr: 9.8907e-04 lr: 9.8907e-04  eta: 4:21:28  time: 1.0848  data_time: 0.0010  memory: 33872  loss: 2.9754
2024/06/17 17:37:28 - mmengine - INFO - Epoch(train)  [2][ 400/1052]  base_lr: 9.8907e-04 lr: 9.8907e-04  eta: 4:19:36  time: 1.0844  data_time: 0.0011  memory: 33872  loss: 2.7072
2024/06/17 17:39:16 - mmengine - INFO - Epoch(train)  [2][ 500/1052]  base_lr: 9.8907e-04 lr: 9.8907e-04  eta: 4:17:45  time: 1.0826  data_time: 0.0011  memory: 33872  loss: 2.6876
2024/06/17 17:41:05 - mmengine - INFO - Epoch(train)  [2][ 600/1052]  base_lr: 9.8907e-04 lr: 9.8907e-04  eta: 4:15:52  time: 1.0831  data_time: 0.0011  memory: 33872  loss: 2.5798
2024/06/17 17:42:53 - mmengine - INFO - Epoch(train)  [2][ 700/1052]  base_lr: 9.8907e-04 lr: 9.8907e-04  eta: 4:14:01  time: 1.0833  data_time: 0.0010  memory: 33872  loss: 2.6002
2024/06/17 17:44:41 - mmengine - INFO - Epoch(train)  [2][ 800/1052]  base_lr: 9.8907e-04 lr: 9.8907e-04  eta: 4:12:10  time: 1.0836  data_time: 0.0011  memory: 33872  loss: 2.8417
2024/06/17 17:46:30 - mmengine - INFO - Epoch(train)  [2][ 900/1052]  base_lr: 9.8907e-04 lr: 9.8907e-04  eta: 4:10:19  time: 1.0835  data_time: 0.0010  memory: 33872  loss: 2.8608
2024/06/17 17:47:22 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 17:48:18 - mmengine - INFO - Epoch(train)  [2][1000/1052]  base_lr: 9.8907e-04 lr: 9.8907e-04  eta: 4:08:29  time: 1.0847  data_time: 0.0011  memory: 33872  loss: 2.8354
2024/06/17 17:49:14 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 17:49:14 - mmengine - INFO - Saving checkpoint at 2 epochs
2024/06/17 17:50:47 - mmengine - INFO - Epoch(val) [2][30/30]    accuracy/top1: 24.5989  accuracy/top5: 55.5348  data_time: 0.0351  time: 2.8287
2024/06/17 17:52:36 - mmengine - INFO - Epoch(train)  [3][ 100/1052]  base_lr: 9.5677e-04 lr: 9.5677e-04  eta: 4:05:45  time: 1.0825  data_time: 0.0010  memory: 33872  loss: 2.7101
2024/06/17 17:54:24 - mmengine - INFO - Epoch(train)  [3][ 200/1052]  base_lr: 9.5677e-04 lr: 9.5677e-04  eta: 4:03:54  time: 1.0832  data_time: 0.0012  memory: 33872  loss: 2.6968
2024/06/17 17:56:12 - mmengine - INFO - Epoch(train)  [3][ 300/1052]  base_lr: 9.5677e-04 lr: 9.5677e-04  eta: 4:02:04  time: 1.0798  data_time: 0.0010  memory: 33872  loss: 2.5187
2024/06/17 17:58:00 - mmengine - INFO - Epoch(train)  [3][ 400/1052]  base_lr: 9.5677e-04 lr: 9.5677e-04  eta: 4:00:13  time: 1.0820  data_time: 0.0010  memory: 33872  loss: 2.6604
2024/06/17 17:59:49 - mmengine - INFO - Epoch(train)  [3][ 500/1052]  base_lr: 9.5677e-04 lr: 9.5677e-04  eta: 3:58:23  time: 1.0825  data_time: 0.0013  memory: 33872  loss: 2.7952
2024/06/17 18:01:37 - mmengine - INFO - Epoch(train)  [3][ 600/1052]  base_lr: 9.5677e-04 lr: 9.5677e-04  eta: 3:56:32  time: 1.0817  data_time: 0.0010  memory: 33872  loss: 2.7561
2024/06/17 18:03:25 - mmengine - INFO - Epoch(train)  [3][ 700/1052]  base_lr: 9.5677e-04 lr: 9.5677e-04  eta: 3:54:41  time: 1.0797  data_time: 0.0010  memory: 33872  loss: 2.7917
2024/06/17 18:05:13 - mmengine - INFO - Epoch(train)  [3][ 800/1052]  base_lr: 9.5677e-04 lr: 9.5677e-04  eta: 3:52:51  time: 1.0817  data_time: 0.0010  memory: 33872  loss: 2.7240
2024/06/17 18:06:57 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 18:07:01 - mmengine - INFO - Epoch(train)  [3][ 900/1052]  base_lr: 9.5677e-04 lr: 9.5677e-04  eta: 3:51:01  time: 1.0811  data_time: 0.0010  memory: 33872  loss: 2.6410
2024/06/17 18:08:49 - mmengine - INFO - Epoch(train)  [3][1000/1052]  base_lr: 9.5677e-04 lr: 9.5677e-04  eta: 3:49:11  time: 1.0801  data_time: 0.0010  memory: 33872  loss: 2.6136
2024/06/17 18:09:45 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 18:09:45 - mmengine - INFO - Saving checkpoint at 3 epochs
2024/06/17 18:11:17 - mmengine - INFO - Epoch(val) [3][30/30]    accuracy/top1: 30.3743  accuracy/top5: 63.2620  data_time: 0.0410  time: 2.8228
2024/06/17 18:13:06 - mmengine - INFO - Epoch(train)  [4][ 100/1052]  base_lr: 9.0451e-04 lr: 9.0451e-04  eta: 3:46:26  time: 1.0806  data_time: 0.0010  memory: 33872  loss: 2.6308
2024/06/17 18:14:54 - mmengine - INFO - Epoch(train)  [4][ 200/1052]  base_lr: 9.0451e-04 lr: 9.0451e-04  eta: 3:44:36  time: 1.0813  data_time: 0.0010  memory: 33872  loss: 2.5029
2024/06/17 18:16:42 - mmengine - INFO - Epoch(train)  [4][ 300/1052]  base_lr: 9.0451e-04 lr: 9.0451e-04  eta: 3:42:46  time: 1.0819  data_time: 0.0010  memory: 33872  loss: 2.6505
2024/06/17 18:18:30 - mmengine - INFO - Epoch(train)  [4][ 400/1052]  base_lr: 9.0451e-04 lr: 9.0451e-04  eta: 3:40:57  time: 1.0814  data_time: 0.0010  memory: 33872  loss: 2.7125
2024/06/17 18:20:18 - mmengine - INFO - Epoch(train)  [4][ 500/1052]  base_lr: 9.0451e-04 lr: 9.0451e-04  eta: 3:39:07  time: 1.0841  data_time: 0.0022  memory: 33872  loss: 2.5984
2024/06/17 18:22:07 - mmengine - INFO - Epoch(train)  [4][ 600/1052]  base_lr: 9.0451e-04 lr: 9.0451e-04  eta: 3:37:18  time: 1.0833  data_time: 0.0010  memory: 33872  loss: 2.6128
2024/06/17 18:23:55 - mmengine - INFO - Epoch(train)  [4][ 700/1052]  base_lr: 9.0451e-04 lr: 9.0451e-04  eta: 3:35:30  time: 1.0826  data_time: 0.0010  memory: 33872  loss: 2.7074
2024/06/17 18:25:43 - mmengine - INFO - Epoch(train)  [4][ 800/1052]  base_lr: 9.0451e-04 lr: 9.0451e-04  eta: 3:33:41  time: 1.0827  data_time: 0.0010  memory: 33872  loss: 2.5557
2024/06/17 18:26:31 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 18:27:32 - mmengine - INFO - Epoch(train)  [4][ 900/1052]  base_lr: 9.0451e-04 lr: 9.0451e-04  eta: 3:31:52  time: 1.0829  data_time: 0.0010  memory: 33872  loss: 2.6219
2024/06/17 18:29:20 - mmengine - INFO - Epoch(train)  [4][1000/1052]  base_lr: 9.0451e-04 lr: 9.0451e-04  eta: 3:30:03  time: 1.0833  data_time: 0.0010  memory: 33872  loss: 2.6869
2024/06/17 18:30:16 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 18:30:16 - mmengine - INFO - Saving checkpoint at 4 epochs
2024/06/17 18:31:48 - mmengine - INFO - Epoch(val) [4][30/30]    accuracy/top1: 27.0321  accuracy/top5: 55.9626  data_time: 0.0353  time: 2.8185
2024/06/17 18:33:37 - mmengine - INFO - Epoch(train)  [5][ 100/1052]  base_lr: 8.3457e-04 lr: 8.3457e-04  eta: 3:27:18  time: 1.0805  data_time: 0.0010  memory: 33872  loss: 2.7600
2024/06/17 18:35:25 - mmengine - INFO - Epoch(train)  [5][ 200/1052]  base_lr: 8.3457e-04 lr: 8.3457e-04  eta: 3:25:29  time: 1.0824  data_time: 0.0011  memory: 33872  loss: 2.9655
2024/06/17 18:37:13 - mmengine - INFO - Epoch(train)  [5][ 300/1052]  base_lr: 8.3457e-04 lr: 8.3457e-04  eta: 3:23:40  time: 1.0811  data_time: 0.0010  memory: 33872  loss: 2.7056
2024/06/17 18:39:01 - mmengine - INFO - Epoch(train)  [5][ 400/1052]  base_lr: 8.3457e-04 lr: 8.3457e-04  eta: 3:21:51  time: 1.0809  data_time: 0.0010  memory: 33872  loss: 2.7477
2024/06/17 18:40:49 - mmengine - INFO - Epoch(train)  [5][ 500/1052]  base_lr: 8.3457e-04 lr: 8.3457e-04  eta: 3:20:02  time: 1.0826  data_time: 0.0010  memory: 33872  loss: 2.9609
2024/06/17 18:42:37 - mmengine - INFO - Epoch(train)  [5][ 600/1052]  base_lr: 8.3457e-04 lr: 8.3457e-04  eta: 3:18:13  time: 1.0779  data_time: 0.0010  memory: 33872  loss: 3.0064
2024/06/17 18:44:25 - mmengine - INFO - Epoch(train)  [5][ 700/1052]  base_lr: 8.3457e-04 lr: 8.3457e-04  eta: 3:16:23  time: 1.0784  data_time: 0.0010  memory: 33872  loss: 2.8481
2024/06/17 18:46:04 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 18:46:13 - mmengine - INFO - Epoch(train)  [5][ 800/1052]  base_lr: 8.3457e-04 lr: 8.3457e-04  eta: 3:14:33  time: 1.0795  data_time: 0.0010  memory: 33872  loss: 2.8005
2024/06/17 18:48:01 - mmengine - INFO - Epoch(train)  [5][ 900/1052]  base_lr: 8.3457e-04 lr: 8.3457e-04  eta: 3:12:44  time: 1.0782  data_time: 0.0010  memory: 33872  loss: 2.6982
2024/06/17 18:49:48 - mmengine - INFO - Epoch(train)  [5][1000/1052]  base_lr: 8.3457e-04 lr: 8.3457e-04  eta: 3:10:54  time: 1.0771  data_time: 0.0010  memory: 33872  loss: 2.5673
2024/06/17 18:50:44 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 18:50:44 - mmengine - INFO - Saving checkpoint at 5 epochs
2024/06/17 18:52:13 - mmengine - INFO - Epoch(val) [5][30/30]    accuracy/top1: 28.3690  accuracy/top5: 58.8770  data_time: 0.0376  time: 2.8133
2024/06/17 18:54:02 - mmengine - INFO - Epoch(train)  [6][ 100/1052]  base_lr: 7.5000e-04 lr: 7.5000e-04  eta: 3:08:09  time: 1.0785  data_time: 0.0011  memory: 33872  loss: 2.6909
2024/06/17 18:55:50 - mmengine - INFO - Epoch(train)  [6][ 200/1052]  base_lr: 7.5000e-04 lr: 7.5000e-04  eta: 3:06:20  time: 1.0790  data_time: 0.0011  memory: 33872  loss: 2.6266
2024/06/17 18:57:38 - mmengine - INFO - Epoch(train)  [6][ 300/1052]  base_lr: 7.5000e-04 lr: 7.5000e-04  eta: 3:04:31  time: 1.0799  data_time: 0.0011  memory: 33872  loss: 2.6418
2024/06/17 18:59:26 - mmengine - INFO - Epoch(train)  [6][ 400/1052]  base_lr: 7.5000e-04 lr: 7.5000e-04  eta: 3:02:42  time: 1.0788  data_time: 0.0011  memory: 33872  loss: 2.6249
2024/06/17 19:01:13 - mmengine - INFO - Epoch(train)  [6][ 500/1052]  base_lr: 7.5000e-04 lr: 7.5000e-04  eta: 3:00:52  time: 1.0787  data_time: 0.0011  memory: 33872  loss: 2.5977
2024/06/17 19:03:01 - mmengine - INFO - Epoch(train)  [6][ 600/1052]  base_lr: 7.5000e-04 lr: 7.5000e-04  eta: 2:59:04  time: 1.0802  data_time: 0.0011  memory: 33872  loss: 2.5648
2024/06/17 19:04:49 - mmengine - INFO - Epoch(train)  [6][ 700/1052]  base_lr: 7.5000e-04 lr: 7.5000e-04  eta: 2:57:15  time: 1.0789  data_time: 0.0011  memory: 33872  loss: 2.6013
2024/06/17 19:05:32 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 19:06:37 - mmengine - INFO - Epoch(train)  [6][ 800/1052]  base_lr: 7.5000e-04 lr: 7.5000e-04  eta: 2:55:26  time: 1.0796  data_time: 0.0011  memory: 33872  loss: 2.4564
2024/06/17 19:08:25 - mmengine - INFO - Epoch(train)  [6][ 900/1052]  base_lr: 7.5000e-04 lr: 7.5000e-04  eta: 2:53:37  time: 1.0797  data_time: 0.0011  memory: 33872  loss: 2.4040
2024/06/17 19:10:13 - mmengine - INFO - Epoch(train)  [6][1000/1052]  base_lr: 7.5000e-04 lr: 7.5000e-04  eta: 2:51:48  time: 1.0782  data_time: 0.0010  memory: 33872  loss: 2.4562
2024/06/17 19:11:09 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 19:11:09 - mmengine - INFO - Saving checkpoint at 6 epochs
2024/06/17 19:12:38 - mmengine - INFO - Epoch(val) [6][30/30]    accuracy/top1: 31.0963  accuracy/top5: 63.7166  data_time: 0.0339  time: 2.8108
2024/06/17 19:14:27 - mmengine - INFO - Epoch(train)  [7][ 100/1052]  base_lr: 6.5451e-04 lr: 6.5451e-04  eta: 2:49:03  time: 1.0787  data_time: 0.0010  memory: 33872  loss: 2.5545
2024/06/17 19:16:15 - mmengine - INFO - Epoch(train)  [7][ 200/1052]  base_lr: 6.5451e-04 lr: 6.5451e-04  eta: 2:47:14  time: 1.0803  data_time: 0.0010  memory: 33872  loss: 2.3935
2024/06/17 19:18:03 - mmengine - INFO - Epoch(train)  [7][ 300/1052]  base_lr: 6.5451e-04 lr: 6.5451e-04  eta: 2:45:26  time: 1.0795  data_time: 0.0011  memory: 33872  loss: 2.3964
2024/06/17 19:19:51 - mmengine - INFO - Epoch(train)  [7][ 400/1052]  base_lr: 6.5451e-04 lr: 6.5451e-04  eta: 2:43:37  time: 1.0794  data_time: 0.0010  memory: 33872  loss: 2.4700
2024/06/17 19:21:39 - mmengine - INFO - Epoch(train)  [7][ 500/1052]  base_lr: 6.5451e-04 lr: 6.5451e-04  eta: 2:41:48  time: 1.0793  data_time: 0.0010  memory: 33872  loss: 2.2737
2024/06/17 19:23:27 - mmengine - INFO - Epoch(train)  [7][ 600/1052]  base_lr: 6.5451e-04 lr: 6.5451e-04  eta: 2:40:00  time: 1.0799  data_time: 0.0011  memory: 33872  loss: 2.2847
2024/06/17 19:25:02 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 19:25:15 - mmengine - INFO - Epoch(train)  [7][ 700/1052]  base_lr: 6.5451e-04 lr: 6.5451e-04  eta: 2:38:11  time: 1.0785  data_time: 0.0010  memory: 33872  loss: 2.3363
2024/06/17 19:27:02 - mmengine - INFO - Epoch(train)  [7][ 800/1052]  base_lr: 6.5451e-04 lr: 6.5451e-04  eta: 2:36:23  time: 1.0796  data_time: 0.0010  memory: 33872  loss: 2.2303
2024/06/17 19:28:50 - mmengine - INFO - Epoch(train)  [7][ 900/1052]  base_lr: 6.5451e-04 lr: 6.5451e-04  eta: 2:34:34  time: 1.0793  data_time: 0.0010  memory: 33872  loss: 2.2444
2024/06/17 19:30:38 - mmengine - INFO - Epoch(train)  [7][1000/1052]  base_lr: 6.5451e-04 lr: 6.5451e-04  eta: 2:32:45  time: 1.0786  data_time: 0.0010  memory: 33872  loss: 2.3103
2024/06/17 19:31:34 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 19:31:34 - mmengine - INFO - Saving checkpoint at 7 epochs
2024/06/17 19:33:04 - mmengine - INFO - Epoch(val) [7][30/30]    accuracy/top1: 35.8021  accuracy/top5: 69.2513  data_time: 0.0371  time: 2.8121
2024/06/17 19:34:53 - mmengine - INFO - Epoch(train)  [8][ 100/1052]  base_lr: 5.5226e-04 lr: 5.5226e-04  eta: 2:30:01  time: 1.0779  data_time: 0.0011  memory: 33872  loss: 2.2727
2024/06/17 19:36:41 - mmengine - INFO - Epoch(train)  [8][ 200/1052]  base_lr: 5.5226e-04 lr: 5.5226e-04  eta: 2:28:12  time: 1.0785  data_time: 0.0010  memory: 33872  loss: 2.3178
2024/06/17 19:38:29 - mmengine - INFO - Epoch(train)  [8][ 300/1052]  base_lr: 5.5226e-04 lr: 5.5226e-04  eta: 2:26:24  time: 1.0797  data_time: 0.0010  memory: 33872  loss: 2.2784
2024/06/17 19:40:17 - mmengine - INFO - Epoch(train)  [8][ 400/1052]  base_lr: 5.5226e-04 lr: 5.5226e-04  eta: 2:24:35  time: 1.0796  data_time: 0.0021  memory: 33872  loss: 2.2506
2024/06/17 19:42:05 - mmengine - INFO - Epoch(train)  [8][ 500/1052]  base_lr: 5.5226e-04 lr: 5.5226e-04  eta: 2:22:46  time: 1.0778  data_time: 0.0010  memory: 33872  loss: 2.1730
2024/06/17 19:43:53 - mmengine - INFO - Epoch(train)  [8][ 600/1052]  base_lr: 5.5226e-04 lr: 5.5226e-04  eta: 2:20:58  time: 1.0795  data_time: 0.0010  memory: 33872  loss: 2.4191
2024/06/17 19:44:31 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 19:45:40 - mmengine - INFO - Epoch(train)  [8][ 700/1052]  base_lr: 5.5226e-04 lr: 5.5226e-04  eta: 2:19:09  time: 1.0785  data_time: 0.0010  memory: 33872  loss: 2.3447
2024/06/17 19:47:28 - mmengine - INFO - Epoch(train)  [8][ 800/1052]  base_lr: 5.5226e-04 lr: 5.5226e-04  eta: 2:17:21  time: 1.0790  data_time: 0.0010  memory: 33872  loss: 2.3445
2024/06/17 19:49:16 - mmengine - INFO - Epoch(train)  [8][ 900/1052]  base_lr: 5.5226e-04 lr: 5.5226e-04  eta: 2:15:32  time: 1.0788  data_time: 0.0010  memory: 33872  loss: 2.2314
2024/06/17 19:51:04 - mmengine - INFO - Epoch(train)  [8][1000/1052]  base_lr: 5.5226e-04 lr: 5.5226e-04  eta: 2:13:44  time: 1.0798  data_time: 0.0014  memory: 33872  loss: 2.3413
2024/06/17 19:52:00 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 19:52:00 - mmengine - INFO - Saving checkpoint at 8 epochs
2024/06/17 19:53:29 - mmengine - INFO - Epoch(val) [8][30/30]    accuracy/top1: 37.6203  accuracy/top5: 72.2193  data_time: 0.0372  time: 2.8134
2024/06/17 19:55:18 - mmengine - INFO - Epoch(train)  [9][ 100/1052]  base_lr: 4.4774e-04 lr: 4.4774e-04  eta: 2:10:59  time: 1.0785  data_time: 0.0010  memory: 33872  loss: 2.2455
2024/06/17 19:57:05 - mmengine - INFO - Epoch(train)  [9][ 200/1052]  base_lr: 4.4774e-04 lr: 4.4774e-04  eta: 2:09:11  time: 1.0776  data_time: 0.0010  memory: 33872  loss: 2.2687
2024/06/17 19:58:53 - mmengine - INFO - Epoch(train)  [9][ 300/1052]  base_lr: 4.4774e-04 lr: 4.4774e-04  eta: 2:07:22  time: 1.0778  data_time: 0.0010  memory: 33872  loss: 2.1622
2024/06/17 20:00:41 - mmengine - INFO - Epoch(train)  [9][ 400/1052]  base_lr: 4.4774e-04 lr: 4.4774e-04  eta: 2:05:34  time: 1.0786  data_time: 0.0010  memory: 33872  loss: 2.2681
2024/06/17 20:02:29 - mmengine - INFO - Epoch(train)  [9][ 500/1052]  base_lr: 4.4774e-04 lr: 4.4774e-04  eta: 2:03:45  time: 1.0791  data_time: 0.0010  memory: 33872  loss: 2.2067
2024/06/17 20:04:00 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 20:04:17 - mmengine - INFO - Epoch(train)  [9][ 600/1052]  base_lr: 4.4774e-04 lr: 4.4774e-04  eta: 2:01:57  time: 1.0796  data_time: 0.0014  memory: 33872  loss: 2.2065
2024/06/17 20:06:05 - mmengine - INFO - Epoch(train)  [9][ 700/1052]  base_lr: 4.4774e-04 lr: 4.4774e-04  eta: 2:00:09  time: 1.0785  data_time: 0.0013  memory: 33872  loss: 2.2136
2024/06/17 20:07:53 - mmengine - INFO - Epoch(train)  [9][ 800/1052]  base_lr: 4.4774e-04 lr: 4.4774e-04  eta: 1:58:20  time: 1.0785  data_time: 0.0010  memory: 33872  loss: 2.0723
2024/06/17 20:09:41 - mmengine - INFO - Epoch(train)  [9][ 900/1052]  base_lr: 4.4774e-04 lr: 4.4774e-04  eta: 1:56:32  time: 1.0781  data_time: 0.0011  memory: 33872  loss: 2.0100
2024/06/17 20:11:28 - mmengine - INFO - Epoch(train)  [9][1000/1052]  base_lr: 4.4774e-04 lr: 4.4774e-04  eta: 1:54:43  time: 1.0781  data_time: 0.0010  memory: 33872  loss: 2.1744
2024/06/17 20:12:24 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 20:12:24 - mmengine - INFO - Saving checkpoint at 9 epochs
2024/06/17 20:13:54 - mmengine - INFO - Epoch(val) [9][30/30]    accuracy/top1: 40.4011  accuracy/top5: 74.1444  data_time: 0.0353  time: 2.8117
2024/06/17 20:15:42 - mmengine - INFO - Epoch(train) [10][ 100/1052]  base_lr: 3.4549e-04 lr: 3.4549e-04  eta: 1:51:59  time: 1.0784  data_time: 0.0012  memory: 33872  loss: 2.0292
2024/06/17 20:17:30 - mmengine - INFO - Epoch(train) [10][ 200/1052]  base_lr: 3.4549e-04 lr: 3.4549e-04  eta: 1:50:11  time: 1.0786  data_time: 0.0011  memory: 33872  loss: 2.0605
2024/06/17 20:19:18 - mmengine - INFO - Epoch(train) [10][ 300/1052]  base_lr: 3.4549e-04 lr: 3.4549e-04  eta: 1:48:22  time: 1.0794  data_time: 0.0010  memory: 33872  loss: 2.1160
2024/06/17 20:21:06 - mmengine - INFO - Epoch(train) [10][ 400/1052]  base_lr: 3.4549e-04 lr: 3.4549e-04  eta: 1:46:34  time: 1.0792  data_time: 0.0011  memory: 33872  loss: 1.9917
2024/06/17 20:22:54 - mmengine - INFO - Epoch(train) [10][ 500/1052]  base_lr: 3.4549e-04 lr: 3.4549e-04  eta: 1:44:46  time: 1.0787  data_time: 0.0011  memory: 33872  loss: 2.0244
2024/06/17 20:23:28 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 20:24:41 - mmengine - INFO - Epoch(train) [10][ 600/1052]  base_lr: 3.4549e-04 lr: 3.4549e-04  eta: 1:42:57  time: 1.0791  data_time: 0.0010  memory: 33872  loss: 2.0810
2024/06/17 20:26:29 - mmengine - INFO - Epoch(train) [10][ 700/1052]  base_lr: 3.4549e-04 lr: 3.4549e-04  eta: 1:41:09  time: 1.0786  data_time: 0.0010  memory: 33872  loss: 1.9841
2024/06/17 20:28:17 - mmengine - INFO - Epoch(train) [10][ 800/1052]  base_lr: 3.4549e-04 lr: 3.4549e-04  eta: 1:39:21  time: 1.0781  data_time: 0.0010  memory: 33872  loss: 2.1550
2024/06/17 20:30:05 - mmengine - INFO - Epoch(train) [10][ 900/1052]  base_lr: 3.4549e-04 lr: 3.4549e-04  eta: 1:37:32  time: 1.0795  data_time: 0.0010  memory: 33872  loss: 2.0158
2024/06/17 20:31:53 - mmengine - INFO - Epoch(train) [10][1000/1052]  base_lr: 3.4549e-04 lr: 3.4549e-04  eta: 1:35:44  time: 1.0786  data_time: 0.0010  memory: 33872  loss: 1.9676
2024/06/17 20:32:49 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 20:32:49 - mmengine - INFO - Saving checkpoint at 10 epochs
2024/06/17 20:34:20 - mmengine - INFO - Epoch(val) [10][30/30]    accuracy/top1: 43.6364  accuracy/top5: 75.6684  data_time: 0.0371  time: 2.8142
2024/06/17 20:36:09 - mmengine - INFO - Epoch(train) [11][ 100/1052]  base_lr: 2.5000e-04 lr: 2.5000e-04  eta: 1:33:00  time: 1.0787  data_time: 0.0011  memory: 33872  loss: 1.8972
2024/06/17 20:37:57 - mmengine - INFO - Epoch(train) [11][ 200/1052]  base_lr: 2.5000e-04 lr: 2.5000e-04  eta: 1:31:12  time: 1.0800  data_time: 0.0011  memory: 33872  loss: 2.0209
2024/06/17 20:39:44 - mmengine - INFO - Epoch(train) [11][ 300/1052]  base_lr: 2.5000e-04 lr: 2.5000e-04  eta: 1:29:23  time: 1.0783  data_time: 0.0011  memory: 33872  loss: 2.0414
2024/06/17 20:41:32 - mmengine - INFO - Epoch(train) [11][ 400/1052]  base_lr: 2.5000e-04 lr: 2.5000e-04  eta: 1:27:35  time: 1.0785  data_time: 0.0011  memory: 33872  loss: 1.7985
2024/06/17 20:42:59 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 20:43:20 - mmengine - INFO - Epoch(train) [11][ 500/1052]  base_lr: 2.5000e-04 lr: 2.5000e-04  eta: 1:25:47  time: 1.0796  data_time: 0.0019  memory: 33872  loss: 1.8710
2024/06/17 20:45:08 - mmengine - INFO - Epoch(train) [11][ 600/1052]  base_lr: 2.5000e-04 lr: 2.5000e-04  eta: 1:23:59  time: 1.0789  data_time: 0.0011  memory: 33872  loss: 2.0020
2024/06/17 20:46:56 - mmengine - INFO - Epoch(train) [11][ 700/1052]  base_lr: 2.5000e-04 lr: 2.5000e-04  eta: 1:22:10  time: 1.0794  data_time: 0.0013  memory: 33872  loss: 1.9973
2024/06/17 20:48:44 - mmengine - INFO - Epoch(train) [11][ 800/1052]  base_lr: 2.5000e-04 lr: 2.5000e-04  eta: 1:20:22  time: 1.0794  data_time: 0.0012  memory: 33872  loss: 1.9682
2024/06/17 20:50:32 - mmengine - INFO - Epoch(train) [11][ 900/1052]  base_lr: 2.5000e-04 lr: 2.5000e-04  eta: 1:18:34  time: 1.0797  data_time: 0.0011  memory: 33872  loss: 1.8579
2024/06/17 20:52:20 - mmengine - INFO - Epoch(train) [11][1000/1052]  base_lr: 2.5000e-04 lr: 2.5000e-04  eta: 1:16:46  time: 1.0810  data_time: 0.0025  memory: 33872  loss: 1.9073
2024/06/17 20:53:16 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 20:53:16 - mmengine - INFO - Saving checkpoint at 11 epochs
2024/06/17 20:54:45 - mmengine - INFO - Epoch(val) [11][30/30]    accuracy/top1: 45.2941  accuracy/top5: 77.5134  data_time: 0.0349  time: 2.8146
2024/06/17 20:56:33 - mmengine - INFO - Epoch(train) [12][ 100/1052]  base_lr: 1.6543e-04 lr: 1.6543e-04  eta: 1:14:01  time: 1.0795  data_time: 0.0010  memory: 33872  loss: 1.9079
2024/06/17 20:58:21 - mmengine - INFO - Epoch(train) [12][ 200/1052]  base_lr: 1.6543e-04 lr: 1.6543e-04  eta: 1:12:13  time: 1.0786  data_time: 0.0010  memory: 33872  loss: 1.7680
2024/06/17 21:00:09 - mmengine - INFO - Epoch(train) [12][ 300/1052]  base_lr: 1.6543e-04 lr: 1.6543e-04  eta: 1:10:25  time: 1.0789  data_time: 0.0010  memory: 33872  loss: 1.9222
2024/06/17 21:01:57 - mmengine - INFO - Epoch(train) [12][ 400/1052]  base_lr: 1.6543e-04 lr: 1.6543e-04  eta: 1:08:37  time: 1.0796  data_time: 0.0010  memory: 33872  loss: 1.7855
2024/06/17 21:02:27 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 21:03:45 - mmengine - INFO - Epoch(train) [12][ 500/1052]  base_lr: 1.6543e-04 lr: 1.6543e-04  eta: 1:06:49  time: 1.0802  data_time: 0.0014  memory: 33872  loss: 1.7580
2024/06/17 21:05:33 - mmengine - INFO - Epoch(train) [12][ 600/1052]  base_lr: 1.6543e-04 lr: 1.6543e-04  eta: 1:05:01  time: 1.0795  data_time: 0.0011  memory: 33872  loss: 1.8613
2024/06/17 21:07:21 - mmengine - INFO - Epoch(train) [12][ 700/1052]  base_lr: 1.6543e-04 lr: 1.6543e-04  eta: 1:03:12  time: 1.0801  data_time: 0.0018  memory: 33872  loss: 1.8787
2024/06/17 21:09:09 - mmengine - INFO - Epoch(train) [12][ 800/1052]  base_lr: 1.6543e-04 lr: 1.6543e-04  eta: 1:01:24  time: 1.0802  data_time: 0.0010  memory: 33872  loss: 1.9267
2024/06/17 21:10:57 - mmengine - INFO - Epoch(train) [12][ 900/1052]  base_lr: 1.6543e-04 lr: 1.6543e-04  eta: 0:59:36  time: 1.0797  data_time: 0.0010  memory: 33872  loss: 1.8084
2024/06/17 21:12:45 - mmengine - INFO - Epoch(train) [12][1000/1052]  base_lr: 1.6543e-04 lr: 1.6543e-04  eta: 0:57:48  time: 1.0804  data_time: 0.0010  memory: 33872  loss: 1.8454
2024/06/17 21:13:41 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 21:13:41 - mmengine - INFO - Saving checkpoint at 12 epochs
2024/06/17 21:15:11 - mmengine - INFO - Epoch(val) [12][30/30]    accuracy/top1: 46.4171  accuracy/top5: 78.0481  data_time: 0.0387  time: 2.8146
2024/06/17 21:16:59 - mmengine - INFO - Epoch(train) [13][ 100/1052]  base_lr: 9.5492e-05 lr: 9.5492e-05  eta: 0:55:04  time: 1.0806  data_time: 0.0013  memory: 33872  loss: 1.8541
2024/06/17 21:18:47 - mmengine - INFO - Epoch(train) [13][ 200/1052]  base_lr: 9.5492e-05 lr: 9.5492e-05  eta: 0:53:15  time: 1.0792  data_time: 0.0011  memory: 33872  loss: 1.7975
2024/06/17 21:20:35 - mmengine - INFO - Epoch(train) [13][ 300/1052]  base_lr: 9.5492e-05 lr: 9.5492e-05  eta: 0:51:27  time: 1.0794  data_time: 0.0011  memory: 33872  loss: 1.8176
2024/06/17 21:21:57 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 21:22:23 - mmengine - INFO - Epoch(train) [13][ 400/1052]  base_lr: 9.5492e-05 lr: 9.5492e-05  eta: 0:49:39  time: 1.0796  data_time: 0.0011  memory: 33872  loss: 1.6930
2024/06/17 21:24:11 - mmengine - INFO - Epoch(train) [13][ 500/1052]  base_lr: 9.5492e-05 lr: 9.5492e-05  eta: 0:47:51  time: 1.0781  data_time: 0.0010  memory: 33872  loss: 1.9257
2024/06/17 21:25:59 - mmengine - INFO - Epoch(train) [13][ 600/1052]  base_lr: 9.5492e-05 lr: 9.5492e-05  eta: 0:46:03  time: 1.0792  data_time: 0.0010  memory: 33872  loss: 1.8837
2024/06/17 21:27:47 - mmengine - INFO - Epoch(train) [13][ 700/1052]  base_lr: 9.5492e-05 lr: 9.5492e-05  eta: 0:44:15  time: 1.0799  data_time: 0.0010  memory: 33872  loss: 1.9103
2024/06/17 21:29:35 - mmengine - INFO - Epoch(train) [13][ 800/1052]  base_lr: 9.5492e-05 lr: 9.5492e-05  eta: 0:42:27  time: 1.0797  data_time: 0.0010  memory: 33872  loss: 1.8635
2024/06/17 21:31:23 - mmengine - INFO - Epoch(train) [13][ 900/1052]  base_lr: 9.5492e-05 lr: 9.5492e-05  eta: 0:40:38  time: 1.0795  data_time: 0.0010  memory: 33872  loss: 1.8939
2024/06/17 21:33:11 - mmengine - INFO - Epoch(train) [13][1000/1052]  base_lr: 9.5492e-05 lr: 9.5492e-05  eta: 0:38:50  time: 1.0808  data_time: 0.0014  memory: 33872  loss: 1.8247
2024/06/17 21:34:07 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 21:34:07 - mmengine - INFO - Saving checkpoint at 13 epochs
2024/06/17 21:35:37 - mmengine - INFO - Epoch(val) [13][30/30]    accuracy/top1: 48.1818  accuracy/top5: 79.4920  data_time: 0.0371  time: 2.8144
2024/06/17 21:37:26 - mmengine - INFO - Epoch(train) [14][ 100/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:36:06  time: 1.0797  data_time: 0.0011  memory: 33872  loss: 1.8261
2024/06/17 21:39:14 - mmengine - INFO - Epoch(train) [14][ 200/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:34:18  time: 1.0788  data_time: 0.0011  memory: 33872  loss: 1.8599
2024/06/17 21:41:02 - mmengine - INFO - Epoch(train) [14][ 300/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:32:30  time: 1.0793  data_time: 0.0011  memory: 33872  loss: 1.8505
2024/06/17 21:41:27 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 21:42:49 - mmengine - INFO - Epoch(train) [14][ 400/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:30:42  time: 1.0780  data_time: 0.0011  memory: 33872  loss: 1.8069
2024/06/17 21:44:37 - mmengine - INFO - Epoch(train) [14][ 500/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:28:54  time: 1.0794  data_time: 0.0012  memory: 33872  loss: 1.8462
2024/06/17 21:46:25 - mmengine - INFO - Epoch(train) [14][ 600/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:27:05  time: 1.0790  data_time: 0.0011  memory: 33872  loss: 1.7190
2024/06/17 21:48:13 - mmengine - INFO - Epoch(train) [14][ 700/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:25:17  time: 1.0798  data_time: 0.0010  memory: 33872  loss: 1.6828
2024/06/17 21:50:01 - mmengine - INFO - Epoch(train) [14][ 800/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:23:29  time: 1.0797  data_time: 0.0010  memory: 33872  loss: 1.8394
2024/06/17 21:51:49 - mmengine - INFO - Epoch(train) [14][ 900/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:21:41  time: 1.0790  data_time: 0.0011  memory: 33872  loss: 1.8206
2024/06/17 21:53:37 - mmengine - INFO - Epoch(train) [14][1000/1052]  base_lr: 4.3227e-05 lr: 4.3227e-05  eta: 0:19:53  time: 1.0794  data_time: 0.0010  memory: 33872  loss: 1.6784
2024/06/17 21:54:33 - mmengine - INFO - Exp name: scratch-allclasses_20240617_170927
2024/06/17 21:54:33 - mmengine - INFO - Saving checkpoint at 14 epochs

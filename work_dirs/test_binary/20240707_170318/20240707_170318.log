2024/07/07 17:03:18 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.12 (main, Nov 20 2023, 15:14:05) [GCC 11.4.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 0
    GPU 0: NVIDIA GeForce GTX 970
    CUDA_HOME: None
    GCC: x86_64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 2.3.1+cu121
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v3.3.6 (Git Hash 86e6af5974177e513fd3fee58425e1063e7f1361)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 12.1
  - NVCC architecture flags: -gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_90,code=sm_90
  - CuDNN 8.9.2
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=12.1, CUDNN_VERSION=8.9.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-stringop-overflow -Wsuggest-override -Wno-psabi -Wno-error=pedantic -Wno-error=old-style-cast -Wno-missing-braces -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=2.3.1, USE_CUDA=ON, USE_CUDNN=ON, USE_CUSPARSELT=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_GLOO=ON, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, USE_ROCM_KERNEL_ASSERT=OFF, 

    TorchVision: 0.18.1+cu121
    OpenCV: 4.10.0
    MMEngine: 0.10.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 0
    deterministic: True
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2024/07/07 17:03:19 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=1024)
data_dir = '/mnt/data'
data_preprocessor = dict(
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    num_classes=7806,
    std=[
        58.395,
        57.12,
        57.375,
    ],
    to_rgb=True)
default_hooks = dict(
    checkpoint=dict(interval=1, max_keep_ckpts=5, type='CheckpointHook'),
    logger=dict(interval=1, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(enable=False, type='VisualizationHook'))
default_scope = 'mmpretrain'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
launcher = 'none'
load_from = '/mnt/c/caw/leafcaw.pth'
log_level = 'INFO'
model = dict(
    backbone=dict(
        arch='base',
        frozen_stages=12,
        img_size=518,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmpretrain/v1.0/dinov2/vit-base-p14_dinov2-pre_3rdparty_20230426-ba246503.pth',
            prefix='backbone',
            type='Pretrained'),
        layer_scale_init_value=1e-05,
        patch_size=14,
        type='VisionTransformer'),
    head=dict(
        in_channels=768,
        loss=dict(type='CrossEntropyLoss'),
        num_classes=7806,
        topk=(
            1,
            5,
        ),
        type='VisionTransformerClsHead'),
    neck=None,
    type='ImageClassifier')
optim_wrapper = dict(
    loss_scale='dynamic',
    optimizer=dict(lr=0.0001, type='AdamW', weight_decay=0.05),
    paramwise_cfg=dict(
        custom_keys=dict(
            cls_token=dict(decay_mult=0.0), mask_token=dict(decay_mult=0.0))),
    type='AmpOptimWrapper')
param_scheduler = [
    dict(T_max=20, by_epoch=True, type='CosineAnnealingLR'),
]
randomness = dict(deterministic=True, seed=0)
resume = False
test_cfg = dict()
test_dataloader = dict(
    batch_size=26,
    collate_fn=dict(type='default_collate'),
    dataset=dict(
        ann_file='annotation/caw_test.txt',
        data_prefix='/mnt/data',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                backend='pillow',
                edge='short',
                interpolation='bicubic',
                scale=518,
                type='ResizeEdge'),
            dict(crop_size=518, type='CenterCrop'),
            dict(type='PackInputs'),
        ],
        type='CustomDataset'),
    num_workers=4,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
test_evaluator = dict(class_id=2473, type='BinaryMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        backend='pillow',
        edge='short',
        interpolation='bicubic',
        scale=518,
        type='ResizeEdge'),
    dict(crop_size=518, type='CenterCrop'),
    dict(type='PackInputs'),
]
train_cfg = dict(by_epoch=True, max_epochs=12, val_interval=1)
train_dataloader = dict(
    batch_size=1024,
    dataset=dict(
        ann_file='annotation/train.txt',
        data_prefix='/mnt/data',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                backend='pillow',
                edge='short',
                interpolation='bicubic',
                scale=518,
                type='ResizeEdge'),
            dict(crop_size=518, type='CenterCrop'),
            dict(type='PackInputs'),
        ],
        type='CustomDataset'),
    num_workers=28,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        backend='pillow',
        interpolation='bicubic',
        scale=518,
        type='RandomResizedCrop'),
    dict(direction='horizontal', prob=0.5, type='RandomFlip'),
    dict(type='PackInputs'),
]
val_cfg = dict()
val_dataloader = dict(
    batch_size=1024,
    dataset=dict(
        ann_file='annotation/val.txt',
        data_prefix='/mnt/data',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                backend='pillow',
                edge='short',
                interpolation='bicubic',
                scale=518,
                type='ResizeEdge'),
            dict(crop_size=518, type='CenterCrop'),
            dict(type='PackInputs'),
        ],
        type='CustomDataset'),
    num_workers=28,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
val_evaluator = dict(
    topk=(
        1,
        5,
    ), type='Accuracy')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    type='UniversalVisualizer', vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/test_binary'

2024/07/07 17:03:20 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2024/07/07 17:03:20 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2024/07/07 17:03:20 - mmengine - WARNING - The prefix is not set in metric class BinaryMetric.
2024/07/07 17:03:22 - mmengine - INFO - Load checkpoint from /mnt/c/caw/leafcaw.pth
2024/07/07 17:03:34 - mmengine - INFO - Epoch(test) [ 1/33]    eta: 0:06:22  time: 11.9645  data_time: 3.3168  memory: 1590  
2024/07/07 17:03:43 - mmengine - INFO - Epoch(test) [ 2/33]    eta: 0:05:27  time: 10.5574  data_time: 1.6601  memory: 1590  
2024/07/07 17:03:53 - mmengine - INFO - Epoch(test) [ 3/33]    eta: 0:05:12  time: 10.4153  data_time: 1.1072  memory: 1590  
2024/07/07 17:04:03 - mmengine - INFO - Epoch(test) [ 4/33]    eta: 0:04:52  time: 10.0943  data_time: 0.8307  memory: 1590  
2024/07/07 17:04:12 - mmengine - INFO - Epoch(test) [ 5/33]    eta: 0:04:37  time: 9.9005  data_time: 0.6648  memory: 1590  
2024/07/07 17:04:21 - mmengine - INFO - Epoch(test) [ 6/33]    eta: 0:04:23  time: 9.7740  data_time: 0.5542  memory: 1590  
2024/07/07 17:04:30 - mmengine - INFO - Epoch(test) [ 7/33]    eta: 0:04:11  time: 9.6833  data_time: 0.4753  memory: 1590  
2024/07/07 17:04:39 - mmengine - INFO - Epoch(test) [ 8/33]    eta: 0:04:00  time: 9.6143  data_time: 0.4160  memory: 1590  
2024/07/07 17:04:47 - mmengine - INFO - Epoch(test) [ 9/33]    eta: 0:03:46  time: 9.4481  data_time: 0.3699  memory: 1590  
2024/07/07 17:04:56 - mmengine - INFO - Epoch(test) [10/33]    eta: 0:03:36  time: 9.4172  data_time: 0.3330  memory: 1590  
2024/07/07 17:05:04 - mmengine - INFO - Epoch(test) [11/33]    eta: 0:03:24  time: 9.0328  data_time: 0.0015  memory: 1590  
2024/07/07 17:05:14 - mmengine - INFO - Epoch(test) [12/33]    eta: 0:03:14  time: 9.0297  data_time: 0.0013  memory: 1590  
2024/07/07 17:05:23 - mmengine - INFO - Epoch(test) [13/33]    eta: 0:03:05  time: 8.9313  data_time: 0.0013  memory: 1590  
2024/07/07 17:05:32 - mmengine - INFO - Epoch(test) [14/33]    eta: 0:02:56  time: 8.9316  data_time: 0.0012  memory: 1590  
2024/07/07 17:05:41 - mmengine - INFO - Epoch(test) [15/33]    eta: 0:02:46  time: 8.9350  data_time: 0.0013  memory: 1590  
2024/07/07 17:05:50 - mmengine - INFO - Epoch(test) [16/33]    eta: 0:02:37  time: 8.9322  data_time: 0.0013  memory: 1590  
2024/07/07 17:06:00 - mmengine - INFO - Epoch(test) [17/33]    eta: 0:02:28  time: 9.0317  data_time: 0.0012  memory: 1590  
2024/07/07 17:06:08 - mmengine - INFO - Epoch(test) [18/33]    eta: 0:02:18  time: 8.9320  data_time: 0.0015  memory: 1590  
2024/07/07 17:06:19 - mmengine - INFO - Epoch(test) [19/33]    eta: 0:02:09  time: 9.1317  data_time: 0.0015  memory: 1590  
2024/07/07 17:06:28 - mmengine - INFO - Epoch(test) [20/33]    eta: 0:02:00  time: 9.1311  data_time: 0.0016  memory: 1590  
2024/07/07 17:06:38 - mmengine - INFO - Epoch(test) [21/33]    eta: 0:01:51  time: 9.3335  data_time: 0.0016  memory: 1590  
2024/07/07 17:06:48 - mmengine - INFO - Epoch(test) [22/33]    eta: 0:01:42  time: 9.4367  data_time: 0.0016  memory: 1590  
2024/07/07 17:06:56 - mmengine - INFO - Epoch(test) [23/33]    eta: 0:01:33  time: 9.3365  data_time: 0.0016  memory: 1590  
2024/07/07 17:07:05 - mmengine - INFO - Epoch(test) [24/33]    eta: 0:01:23  time: 9.3374  data_time: 0.0016  memory: 1590  
2024/07/07 17:07:15 - mmengine - INFO - Epoch(test) [25/33]    eta: 0:01:14  time: 9.4341  data_time: 0.0016  memory: 1590  
2024/07/07 17:07:26 - mmengine - INFO - Epoch(test) [26/33]    eta: 0:01:05  time: 9.5383  data_time: 0.0016  memory: 1590  
2024/07/07 17:07:34 - mmengine - INFO - Epoch(test) [27/33]    eta: 0:00:55  time: 9.3381  data_time: 0.0016  memory: 1590  
2024/07/07 17:07:43 - mmengine - INFO - Epoch(test) [28/33]    eta: 0:00:46  time: 9.4394  data_time: 0.0013  memory: 1591  
2024/07/07 17:07:54 - mmengine - INFO - Epoch(test) [29/33]    eta: 0:00:37  time: 9.5405  data_time: 0.0013  memory: 1591  
2024/07/07 17:08:05 - mmengine - INFO - Epoch(test) [30/33]    eta: 0:00:28  time: 9.7397  data_time: 0.0013  memory: 1591  
2024/07/07 17:08:14 - mmengine - INFO - Epoch(test) [31/33]    eta: 0:00:18  time: 9.6386  data_time: 0.0013  memory: 1591  
2024/07/07 17:08:23 - mmengine - INFO - Epoch(test) [32/33]    eta: 0:00:09  time: 9.5343  data_time: 0.0012  memory: 1591  
2024/07/07 17:08:26 - mmengine - INFO - Epoch(test) [33/33]    eta: 0:00:00  time: 8.9667  data_time: 0.0012  memory: 1164  
2024/07/07 17:08:26 - mmengine - INFO - Epoch(test) [33/33]    accuracy: 0.9870  precision: 0.8966  recall: 0.9123  f1: 0.9043  tp: 52  tn: 786  fp: 6  fn: 5  data_time: 0.1019  time: 9.1997
